// Code generated by MockGen. DO NOT EDIT.
// Source: actions_factory.go

// Package actions_factory_mock is a generated GoMock package.
package actions_factory_mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	"github.com/acceldata-io/wizard/internal/parser"
	"github.com/acceldata-io/wizard/pkg/actions"
)

// MockActionsFactory is a mock of ActionsFactory interface.
type MockActionsFactory struct {
	ctrl     *gomock.Controller
	recorder *MockActionsFactoryMockRecorder
}

// MockActionsFactoryMockRecorder is the mock recorder for MockActionsFactory.
type MockActionsFactoryMockRecorder struct {
	mock *MockActionsFactory
}

// NewMockActionsFactory creates a new mock instance.
func NewMockActionsFactory(ctrl *gomock.Controller) *MockActionsFactory {
	mock := &MockActionsFactory{ctrl: ctrl}
	mock.recorder = &MockActionsFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActionsFactory) EXPECT() *MockActionsFactoryMockRecorder {
	return m.recorder
}

// NewActions mocks base method.
func (m *MockActionsFactory) NewActions(list *parser.Action, agentName string, config interface{}, wizardFacts map[string]interface{}, timeout int, register string) actions.Action {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewActions", list, agentName, config, wizardFacts, timeout, register)
	ret0, _ := ret[0].(actions.Action)
	return ret0
}

// NewActions indicates an expected call of NewActions.
func (mr *MockActionsFactoryMockRecorder) NewActions(list, agentName, config, wizardFacts, timeout, register interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewActions", reflect.TypeOf((*MockActionsFactory)(nil).NewActions), list, agentName, config, wizardFacts, timeout, register)
}
